---
title: "4 - Evaluar modelos"
subtitle: "Introduction to tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    include-after-body: footer-annotations.html
    theme: [default, tidymodels.scss]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
    fig.path: "figures/"
execute: 
  eval: false
---

```{r setup}
#| eval: true
#| include: false
#| file: setup.R
```

## Looking at predictions

```{r setup-previous}
#| echo: false
library(tidymodels)

set.seed(123)
taxi <- readRDS(here::here("archive/2024-03-conectaR-spanish/taxi.rds"))

taxi_separar <- initial_split(taxi, prop = 0.8, strata = propina)
taxi_entrenar <- training(taxi_separar)
taxi_prueba <- testing(taxi_separar)

arbol_espec <- decision_tree(cost_complexity = 0.0001, mode = "classification")
arbol_flujo <- workflow(propina ~ ., arbol_espec)
taxi_ajustado <- fit(arbol_flujo, taxi_entrenar)
```

```{r taxi-fit-augment}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  relocate(propina, .pred_class, .pred_si, .pred_no)
```

## Matriz de confusión `r hexes("yardstick")`

![](images/confusion-matrix.png)



## Matriz de confusión `r hexes("yardstick")`

```{r conf-mat}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  conf_mat(truth = propina, estimate = .pred_class)
```

## Matriz de confusión `r hexes("yardstick")`

```{r conf-mat-plot}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  conf_mat(truth = propina, estimate = .pred_class) %>%
  autoplot(type = "heatmap")
```

## Mediciones de la calidad del modelo `r hexes("yardstick")`

::: columns
::: {.column width="60%"}
```{r acc}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  accuracy(truth = propina, estimate = .pred_class)
```
:::

::: {.column width="40%"}
![](images/confusion-matrix-accuracy.png)
:::
:::

## El riesgo de concentrarse en la exactitud `r hexes("yardstick")`

Hay que tener cuidado utilizando exactitud (`accuracy()`) ya que nos puede dar
"buenos" resultado se predecimos con datos que no están balanceados

```{r acc-2}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  mutate(.pred_class = factor("si", levels = c("si", "no"))) %>%
  accuracy(truth = propina, estimate = .pred_class)
```

## Mediciones de la calidad del modelo `r hexes("yardstick")`

::: columns
::: {.column width="60%"}
```{r sens}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  sensitivity(truth = propina, estimate = .pred_class)
```
:::

::: {.column width="40%"}
![](images/confusion-matrix-sensitivity.png)
:::
:::


## Mediciones de la calidad del modelo `r hexes("yardstick")`

::: columns
::: {.column width="60%"}
```{r sens-2}
#| code-line-numbers: "3-6"
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  sensitivity(truth = propina, estimate = .pred_class)
```

<br>

```{r spec}
augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  specificity(truth = propina, estimate = .pred_class)
```
:::

::: {.column width="40%"}
![](images/confusion-matrix-specificity.png)
:::
:::

## Mediciones de la calidad del modelo `r hexes("yardstick")`

Para combinar multiples cálculos en una tabla, usa `metric_set()`

```{r taxi-metrics}
taxi_metrics <- metric_set(accuracy, specificity, sensitivity)

augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  taxi_metrics(truth = propina, estimate = .pred_class)
```

## Mediciones de la calidad del modelo `r hexes("yardstick")`

```{r taxi-metrics-grouped}
taxi_metrics <- metric_set(accuracy, specificity, sensitivity)

augment(taxi_ajustado, new_data = taxi_entrenar) %>%
  group_by(local) %>%
  taxi_metrics(truth = propina, estimate = .pred_class)
```

## Two class data

Estas métricas asumen que sabemos cual es límite para convertir probabilidades de
predicción "suaves" a prediciones de clase "duras"
. . .

Is a 50% threshold good? 

What happens if we say that we need to be 80% sure to declare an event?

-   sensitivity ⬇️, specificity ⬆️

. . .

What happens for a 20% threshold?

-   sensitivity ⬆️, specificity ⬇️

## Varying the threshold

```{r}
#| label: thresholds
#| echo: false

augment(taxi_ajustado, new_data = taxi_entrenar) %>% 
  roc_curve(truth = propina, .pred_si) %>% 
  filter(is.finite(.threshold)) %>% 
  pivot_longer(c(specificity, sensitivity), names_to = "statistic", values_to = "value") %>% 
  rename(`event threshold` = .threshold) %>% 
  ggplot(aes(x = `event threshold`, y = value, col = statistic, group = statistic)) + 
  geom_line() +
  scale_color_brewer(palette = "Dark2") +
  labs(y = NULL) +
  coord_equal() +
  theme(legend.position = "top")
```

## Curvas ROC

Para crear una "curva ROC", osea una curva de *característica operativa del 
receptor* hacemos lo siguiente:

- Calcular la sensibilidad y especificidad de todos los límites posibles

- Gráficar los falsos positivos en el axis X, contra los positivos verdaderos
en el axis Y.

Ya que la sensibilidad es la proporción de positivos verdaderos, y la especificidad 
es la de los negativos verdaderos, entonces `1 - especificidad` es la
proporción de los falsos positivos.

. . .

Podemos usar el area debajo de la curva (AUC = area under de curve) 
ROC como una métrica de clasificación:

- ROC AUC = 1 💯 
- ROC AUC = 1/2 😢

:::notes
ROC curves are insensitive to class imbalance.
:::

## Curvas ROC `r hexes("yardstick")`

```{r roc-auc}
# Assumes _first_ factor level is event; there are options to change that
augment(taxi_ajustado, new_data = taxi_entrenar) %>% 
  roc_curve(truth = propina, .pred_si) %>%
  slice(1, 20, 50)

augment(taxi_ajustado, new_data = taxi_entrenar) %>% 
  roc_auc(truth = propina, .pred_si)
```

## Gráfica de curvas ROC `r hexes("yardstick")`

```{r roc-curve}
#| fig-width: 6
#| fig-height: 6
#| output-location: "column"

augment(taxi_ajustado, new_data = taxi_entrenar) %>% 
  roc_curve(truth = propina, .pred_si) %>%
  autoplot()
```

## Tu turno {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Calcule y gráfique una curva ROC con su modelo*

*¿Cuales son los datos que se utilizaron para esta curva ROC?*

```{r ex-roc-curve}
#| echo: false
countdown::countdown(minutes = 5, id = "roc-curve")
```

##  {background-iframe="https://yardstick.tidymodels.org/reference/index.html"}

::: footer
:::

# ⚠️ LOS PELIGROS DEL SOBREAJUSTAR ⚠️

## Los peligros del sobreajustar ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-train-1.svg)

## Los peligros del sobreajustar ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-test-1.svg)

## Los peligros del sobreajustar ⚠️ `r hexes("yardstick")`

```{r augment-train}
taxi_ajustado %>%
  augment(taxi_entrenar)
```

A esto le llamamos "resubstitución" ó "repredecir en los datos de entrenamiento"


## Los peligros del sobreajustar ⚠️ `r hexes("yardstick")`

```{r augment-acc}
taxi_ajustado %>%
  augment(taxi_entrenar) %>%
  accuracy(propina, .pred_class)
```

A esto le llamamos "resubstitución de la estimación"

## Los peligros del sobreajustar ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r augment-acc-2}
taxi_ajustado %>%
  augment(taxi_entrenar) %>%
  accuracy(propina, .pred_class)
```
:::

::: {.column width="50%"}
:::
:::

## Los peligros del sobreajustar ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r augment-acc-3}
taxi_ajustado %>%
  augment(taxi_entrenar) %>%
  accuracy(propina, .pred_class)
```
:::

::: {.column width="50%"}
```{r augment-acc-test}
taxi_ajustado %>%
  augment(taxi_prueba) %>%
  accuracy(propina, .pred_class)
```
:::
:::

. . .

⚠️ Acuerdate que estamos demonstrando el sobreajuste

. . .


⚠️ No utilizes el set the prueba sino hasta el *fin* de tu analisis

## "Ja-ja-ja, estoy en peligro" {background-image="https://media.giphy.com/media/55itGuoAJiZEEen9gg/giphy.gif" background-size="70%"}



## Tu turno {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute bottom="0" left="0" width="150" height="150"}

*Usa `augment()` y una función de métrica para calcular una métrica de classificación,
por ejemplo `brier_class()`*


*Calcula las métricas para los datos de entrenamiento y de prueba para
demonstrar el sobreajuste*

*Nota la evidencia de sobreajuste* ⚠️

```{r ex-augment-metrics}
#| echo: false
countdown::countdown(minutes = 5, id = "augment-metrics")
```

## Los peligros del sobreajustar ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r brier-class}
taxi_ajustado %>%
  augment(taxi_entrenar) %>%
  brier_class(propina, .pred_si)
```
:::

::: {.column width="50%"}
```{r brier-class-2}
taxi_ajustado %>%
  augment(taxi_prueba) %>%
  brier_class(propina, .pred_si)
```
:::
:::

. . .

¿Que tal si queremos comparar más modelos?

. . .

...y comparar configuraciones para los modelos?

. . .

Y tambien queremos saber si las diferencias son importantes

# Los datos de prueba son valiosos 💎

# ¿Como podríamos usar los datos de entrenamiento para comparar y evaluar varios modelos?

##  {background-color="white" background-image="https://www.tmwr.org/premade/resampling.svg" background-size="80%"}

## Cross-validation

![](https://www.tmwr.org/premade/three-CV.svg)

## Cross-validation

![](https://www.tmwr.org/premade/three-CV-iter.svg)

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*If we use 10 folds, what percent of the training data*
*Si usamos 10 plieges (folds), cual es el porcentaje de datos de entrenamiento*

-   *cuantos terminan en análisis*
-   *cuantos terminan en evaluación (assesment)*

*...para **cada** pliege?*

![](images/taxi_spinning.svg){width="300"}

```{r ex-percent-in-folds}
#| echo: false
countdown::countdown(minutes = 3, id = "percent-in-folds")
```

## Cross-validation `r hexes("rsample")`

```{r vfold-cv}
vfold_cv(taxi_entrenar) # v = 10 is default
```

## Cross-validation `r hexes("rsample")`

¿Que hay en este?

```{r taxi-splits}
taxi_folds <- vfold_cv(taxi_entrenar)
taxi_folds$splits[1:3]
```

::: notes
Talk about a list column, storing non-atomic types in dataframe
:::

## Cross-validation `r hexes("rsample")`

```{r vfold-cv-v}
vfold_cv(taxi_entrenar, v = 5)
```

## Cross-validation `r hexes("rsample")`

```{r vfold-cv-strata}
vfold_cv(taxi_entrenar, strata = propina)
```

. . .

Estratificar usualmente ayuda, y con pocos malas consecuencias 

## Cross-validation `r hexes("rsample")`

Usaremos esto:

```{r taxi-folds}
set.seed(123)
taxi_folds <- vfold_cv(taxi_entrenar, v = 10, strata = propina)
taxi_folds
```

. . .


Especifica la semilla (seed) cuando estas creando remuestreos 

# Estmos equipados con métricas y remuestreos


## Ajustemos nuestro modelo usando los remuestreos

```{r fit-resamples}
taxi_res <- fit_resamples(arbol_flujo, taxi_folds)
taxi_res
```

## Evaluando la calidad del modelo `r hexes("tune")`

```{r collect-metrics}
taxi_res %>%
  collect_metrics()
```

::: notes
`collect_metrics()` is one of a suite of `collect_*()` functions that can be used to work with columns of tuning results. Most columns in a tuning result prefixed with `.` have a corresponding `collect_*()` function with options for common summaries.
:::

. . .

Podemos medir correctamente la la calidad del modelo usando solo los datos de entrenamiento 🎉

## Comparando las métricas `r hexes("yardstick")`

¿Que diferencia hay entre las métricas usando los datos de remuestreo, y usando
los datos de entrenamiento y prueba?

```{r calc-roc-auc}
#| echo: false
taxi_entrenaring_roc_auc <-
  taxi_ajustado %>%
  augment(taxi_entrenar) %>%
  roc_auc(propina, .pred_si) %>%
  pull(.estimate) %>%
  round(digits = 2)

taxi_pruebaing_roc_auc <-
  taxi_ajustado %>%
  augment(taxi_prueba) %>%
  roc_auc(propina, .pred_si) %>%
  pull(.estimate) %>%
  round(digits = 2)
```

::: columns
::: {.column width="50%"}
```{r collect-metrics-2}
taxi_res %>%
  collect_metrics() %>% 
  select(.metric, mean, n)
```
:::

::: {.column width="50%"}

El ROC AUC antes era:

TODO: restore r
- `taxi_entrenaring_roc_auc` para el set the entrenamiento
- `taxi_pruebaing_roc_auc` para el set the prueba
:::
:::

. . .

Acuerdate que:

⚠️ Los datos de entrenamiento da métricas demasiado optimísticas

⚠️ Los datos de prueba son valiosos


## Evaluating model performance `r hexes("tune")`

```{r save-predictions}
# Save the assessment set results
ctrl_taxi <- control_resamples(save_pred = TRUE)
taxi_res <- fit_resamples(arbol_flujo, taxi_folds, control = ctrl_taxi)

taxi_res
```

## Evaluating model performance `r hexes("tune")`

```{r collect-predictions}
# Save the assessment set results
taxi_preds <- collect_predictions(taxi_res)
taxi_preds
```

## Evaluating model performance `r hexes("tune")`

```{r taxi-metrics-by-id}
taxi_preds %>% 
  group_by(id) %>%
  taxi_metrics(truth = propina, estimate = .pred_class)
```

## Where are the fitted models? `r hexes("tune")`  {.annotation}

```{r taxi-res}
taxi_res
```

. . .

🗑️

# Alternate resampling schemes

## Bootstrapping

![](https://www.tmwr.org/premade/bootstraps.svg)

## Bootstrapping `r hexes("rsample")`

```{r bootstraps}
set.seed(3214)
bootstraps(taxi_entrenar)
```

##  {background-iframe="https://rsample.tidymodels.org/reference/index.html"}

::: footer
:::

## The whole game - status update

```{r diagram-resamples, echo = FALSE}
#| fig-align: "center"

knitr::include_graphics("images/whole-game-transparent-resamples.jpg")
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Create:*

-   *Monte Carlo Cross-Validation sets*
-   *validation set*

(use the reference guide to find the functions)

*Don't forget to set a seed when you resample!*

```{r ex-try-rsample}
#| echo: false
countdown::countdown(minutes = 5, id = "try-rsample")
```

## Monte Carlo Cross-Validation `r hexes("rsample")`

```{r mc-cv}
set.seed(322)
mc_cv(taxi_entrenar, times = 10)
```

## Validation set `r hexes("rsample")`

```{r validation-split}
set.seed(853)
taxi_val_split <- initial_validation_split(taxi, strata = propina)
validation_set(taxi_val_split)
```

. . .

A validation set is just another type of resample

# Decision tree 🌳

# Random forest 🌳🌲🌴🌵🌴🌳🌳🌴🌲🌵🌴🌲🌳🌴🌳🌵🌵🌴🌲🌲🌳🌴🌳🌴🌲🌴🌵🌴🌲🌴🌵🌲🌵🌴🌲🌳🌴🌵🌳🌴🌳

## Random forest 🌳🌲🌴🌵🌳🌳🌴🌲🌵🌴🌳🌵

- Ensemble many decision tree models

- All the trees vote! 🗳️

- Bootstrap aggregating + random predictor sampling

. . .

- Often works well without tuning hyperparameters (more on this in Advanced tidymodels!), as long as there are enough trees

## Create a random forest model `r hexes("parsnip")`

```{r rf-spec}
rf_spec <- rand_forest(trees = 1000, mode = "classification")
rf_spec
```

## Create a random forest model `r hexes("workflows")`

```{r rf-wflow}
rf_wflow <- workflow(propina ~ ., rf_spec)
rf_wflow
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Use `fit_resamples()` and `rf_wflow` to:*

-   *keep predictions*
-   *compute metrics*

```{r ex-try-fit-resamples}
#| echo: false
countdown::countdown(minutes = 8, id = "try-fit-resamples")
```

## Evaluating model performance `r hexes("tune")`

```{r collect-metrics-rf}
ctrl_taxi <- control_resamples(save_pred = TRUE)

# Random forest uses random numbers so set the seed first

set.seed(2)
rf_res <- fit_resamples(rf_wflow, taxi_folds, control = ctrl_taxi)
collect_metrics(rf_res)
```

## The whole game - status update

```{r diagram-select, echo = FALSE}
#| fig-align: "center"

knitr::include_graphics("images/whole-game-transparent-select.jpg")
```

## The final fit `r hexes("tune")` 

Suppose that we are happy with our random forest model.

Let's fit the model on the training set and verify our performance using the test set.

. . .

We've shown you `fit()` and `predict()` (+ `augment()`) but there is a shortcut:

```{r final-fit}
# taxi_separar has train + test info
final_fit <- last_fit(rf_wflow, taxi_separar) 

final_fit
```

## What is in `final_fit`? `r hexes("tune")`

```{r collect-metrics-final-fit}
collect_metrics(final_fit)
```

. . .

These are metrics computed with the **test** set

## What is in `final_fit`? `r hexes("tune")`

```{r collect-predictions-final-fit}
collect_predictions(final_fit)
```

## What is in `final_fit`? `r hexes("tune")`

```{r extract-workflow}
extract_workflow(final_fit)
```

. . .

Use this for **prediction** on new data, like for deploying

## The whole game

```{r diagram-final-performance, echo = FALSE}
#| fig-align: "center"

knitr::include_graphics("images/whole-game-final-performance.jpg")
```
