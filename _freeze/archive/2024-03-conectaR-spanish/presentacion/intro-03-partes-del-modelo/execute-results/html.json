{
  "hash": "76b1f1b60aa47d76ab1bd0ba5e1d782a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3 - Las partes de un modelo\"\nsubtitle: \"Introducciendo Tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*¿Como ajustar un modelo linear en R?*\n\n*¿De cuantas maneras sabes como ajustar este tipo de modelo?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"how-to-fit-linear-model\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n. . .\n\n-   `lm` para regresión linear\n\n-   `glm` para regresión linear generalizada\n\n-   `glmnet` para regresión regularizada\n\n-   `keras` para regresión dentro de Tensorflow\n\n-   `stan` para regresión bayensiana\n\n-   `spark` para datos \"grandes\"\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n. . .\n\n::: columns\n::: {.column width=\"40%\"}\n-   Elije un [modelo]{.underline}\n-   Especifica el \"motor\"\n-   Establece el modo \n:::\n\n::: {.column width=\"60%\"}\n![](images/taxi_spinning.svg)\n:::\n:::\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg()\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n```\n:::\n\n\n\n:::notes\nModels have default engines\n:::\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"40%\"}\n-   Elije un modelo\n-   Especifica el [\"motor\"]{.underline}\n-   Establece el modo \n:::\n\n::: {.column width=\"60%\"}\n![](images/taxi_spinning.svg)\n:::\n:::\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg() %>%\n  set_engine(\"glmnet\")\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glmnet\n```\n:::\n\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg() %>%\n  set_engine(\"stan\")\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: stan\n```\n:::\n\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"40%\"}\n-   Elije un modelo\n-   Especifica el \"motor\"\n-   Establece el [modo]{.underline}\n:::\n\n::: {.column width=\"60%\"}\n![](images/taxi_spinning.svg)\n:::\n:::\n\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree()\n#> Decision Tree Model Specification (unknown mode)\n#> \n#> Computational engine: rpart\n```\n:::\n\n\n:::notes\nSome models have a default mode\n:::\n\n## Para especificar un modelo ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree() %>% \n  set_mode(\"classification\")\n#> Decision Tree Model Specification (classification)\n#> \n#> Computational engine: rpart\n```\n:::\n\n\n. . .\n\n<br></br>\n\n::: r-fit-text\nEl listado de modelos se encuentra aquí: <https://www.tidymodels.org/find/parsnip/> \n:::\n\n::: footer\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"40%\"}\n-   Elije un [modelo]{.underline}\n-   Especifica el [\"motor\"]{.underline}\n-   Establece el [modo]{.underline}\n:::\n\n::: {.column width=\"60%\"}\n![](images/taxi_spinning.svg)\n:::\n:::\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Corre el \"chunk\" `arbol_espec` en tu archivo `.qmd`.*\n\n*Cambia el código para que utilize una regresión linear*<br></br>\n\n::: r-fit-text\nEl listado de modelos se encuentra aquí: <https://www.tidymodels.org/find/parsnip/> \n:::\n\n<br></br>\n\n*Reto: Edita el código para usar otro tipo de modelo. Por ejemplo, trata de usar\nel árbol disponible dentro del paquete partykit, o trata un modelo de tipo \ndiferente*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"explore-tree-spec\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Los modelos que usaremos hoy\n\n* Regresión logística\n* Arboles de decisión\n\n\n::: {.cell}\n\n:::\n\n\n## Regresión logística\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-rates-1.svg)\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n:::\n:::\n\n## Regresión logística\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-1.svg)\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n:::\n:::\n\n## Regresión logística\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-2-1.svg)\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n\n-   El logit del la probabilidad del resultado \n\n$log(\\frac{p}{1 - p}) = \\beta_0 + \\beta_1\\cdot \\text{A}$\n\n-   Calcular la línea de sigmoideo que separan las dos clases\n:::\n:::\n\n## Arboles de decisión\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-1.svg){fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n:::\n:::\n\n## Arboles de decisión\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-2-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n-   El resultado es decidido usando una serie de decisiones basados en las \nvariables predictivas\n\n-   Primero, el arbol *crece* hasta que se llega a una decision \n\n-   Después, el arbol es *recortado* para que no sea tan complejo\n:::\n:::\n\n## Arboles de decisión\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-3-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-tree-preds-1.svg)\n:::\n:::\n\n:::\n:::\n\n## Todos los modelos están equivocados, pero algunos pueden ser utíl\n\n::: columns\n::: {.column width=\"50%\"}\n### Regresión logística\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-3-1.svg)\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Arboles de decisión\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-tree-preds-2-1.svg)\n:::\n:::\n\n:::\n:::\n\n# El flujo de trabajo de un modelo\n\n## Los flujos de trabajo combinan el \"preprocesamiento\" y el modelo\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 20\nflowchart LR\n  dt[Datos]\n  pr[Predictores]\n  subgraph fl[Flujo del modelo]\n    pca[PCA]\n    ls[Menos cuadrados]\n    pca-->ls\n  end\n  dt-->fl\n  pr-->fl\n  ft[Modelo ajustado]\n  fl-->ft\n  style fl fill:#fff,stroke:#666,color:#000\n```\n\n\n:::notes\nExplain that PCA that is a preprocessor / dimensionality reduction, used to decorrelate data\n:::\n\n\n## ¿Que no está bien en este flujo? {.annotation}\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 20\nflowchart LR\n  dt[Datos]\n  pr[Predictores]\n  pca[PCA]\n  subgraph fl[Flujo del modelo]\n    ls[Menos cuadrados]\n  end\n  pca-->fl\n  dt-->pca\n  pr-->pca\n  ft[Modelo ajustado]\n  fl-->ft\n  style fl fill:#fff,stroke:#666,color:#000\n```\n\n\n## ¿Por que utilizar `workflow()`? ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n. . .\n\n\n-  `workflow` maneja nuevos niveles factoriales mejor que las herramientas regulares\nde R\n\n. . .\n\n\n-   Puedes utilizar \"preprocesadores\" que no son formulas \n\n. . .\n\n\n-   Ayudan a organizar un proyecto que utiliza varios modelos\n\n. . .\n\n\n-   [Aún más importante,]{.underline} un flujo de `workflow` encaja todo el\nprocesso de modelamiento, desde la creación (`fit()`) del modelo, hasta el uso del modelo \n(`predict()`)\n\n::: notes\nTwo ways workflows handle levels better than base R:\n\n-   Enforces that new levels are not allowed at prediction time (this is an optional check that can be turned off)\n\n-   Restores missing levels that were present at fit time, but happen to be missing at prediction time (like, if your \"new\" data just doesn't have an instance of that level)\n:::\n\n## El flujo de trabajo de un modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol_espec <-\n  decision_tree(cost_complexity = 0.002) %>% \n  set_mode(\"classification\")\n\narbol_espec %>% \n  fit(propina ~ ., data = taxi_entrenar) \n#> parsnip model object\n#> \n#> n= 8000 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 8000 616 si (0.92300000 0.07700000)  \n#>    2) distancia>=14.12 2041  68 si (0.96668300 0.03331700) *\n#>    3) distancia< 14.12 5959 548 si (0.90803826 0.09196174)  \n#>      6) distancia< 5.275 5419 450 si (0.91695885 0.08304115) *\n#>      7) distancia>=5.275 540  98 si (0.81851852 0.18148148)  \n#>       14) compania=Chicago Independents,City Service,otra,Sun Taxi,Taxi Affiliation Services,Taxicab Insurance Agency Llc 478  68 si (0.85774059 0.14225941) *\n#>       15) compania=Flash Cab 62  30 si (0.51612903 0.48387097)  \n#>         30) dia=Jue 12   2 si (0.83333333 0.16666667) *\n#>         31) dia=Lun,Mar,Mie,Vie,Sab,Dom 50  22 no (0.44000000 0.56000000)  \n#>           62) distancia>=11.77 14   4 si (0.71428571 0.28571429) *\n#>           63) distancia< 11.77 36  12 no (0.33333333 0.66666667) *\n```\n:::\n\n\n## El flujo de trabajo de un modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol_espec <-\n  decision_tree(cost_complexity = 0.002) %>% \n  set_mode(\"classification\")\n\nworkflow() %>%\n  add_formula(propina ~ .) %>%\n  add_model(arbol_espec) %>%\n  fit(data = taxi_entrenar) \n#> ══ Workflow [trained] ════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: decision_tree()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> propina ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> n= 8000 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 8000 616 si (0.92300000 0.07700000)  \n#>    2) distancia>=14.12 2041  68 si (0.96668300 0.03331700) *\n#>    3) distancia< 14.12 5959 548 si (0.90803826 0.09196174)  \n#>      6) distancia< 5.275 5419 450 si (0.91695885 0.08304115) *\n#>      7) distancia>=5.275 540  98 si (0.81851852 0.18148148)  \n#>       14) compania=Chicago Independents,City Service,otra,Sun Taxi,Taxi Affiliation Services,Taxicab Insurance Agency Llc 478  68 si (0.85774059 0.14225941) *\n#>       15) compania=Flash Cab 62  30 si (0.51612903 0.48387097)  \n#>         30) dia=Jue 12   2 si (0.83333333 0.16666667) *\n#>         31) dia=Lun,Mar,Mie,Vie,Sab,Dom 50  22 no (0.44000000 0.56000000)  \n#>           62) distancia>=11.77 14   4 si (0.71428571 0.28571429) *\n#>           63) distancia< 11.77 36  12 no (0.33333333 0.66666667) *\n```\n:::\n\n\n## El flujo de trabajo de un modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol_espec <-\n  decision_tree(cost_complexity = 0.002) %>% \n  set_mode(\"classification\")\n\nworkflow(propina ~ ., arbol_espec) %>% \n  fit(data = taxi_entrenar) \n#> ══ Workflow [trained] ════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: decision_tree()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> propina ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> n= 8000 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 8000 616 si (0.92300000 0.07700000)  \n#>    2) distancia>=14.12 2041  68 si (0.96668300 0.03331700) *\n#>    3) distancia< 14.12 5959 548 si (0.90803826 0.09196174)  \n#>      6) distancia< 5.275 5419 450 si (0.91695885 0.08304115) *\n#>      7) distancia>=5.275 540  98 si (0.81851852 0.18148148)  \n#>       14) compania=Chicago Independents,City Service,otra,Sun Taxi,Taxi Affiliation Services,Taxicab Insurance Agency Llc 478  68 si (0.85774059 0.14225941) *\n#>       15) compania=Flash Cab 62  30 si (0.51612903 0.48387097)  \n#>         30) dia=Jue 12   2 si (0.83333333 0.16666667) *\n#>         31) dia=Lun,Mar,Mie,Vie,Sab,Dom 50  22 no (0.44000000 0.56000000)  \n#>           62) distancia>=11.77 14   4 si (0.71428571 0.28571429) *\n#>           63) distancia< 11.77 36  12 no (0.33333333 0.66666667) *\n```\n:::\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Corre el \"chunk\" `arbol_flujo` en tu archivo `.qmd`.*\n\n*Edita el codigo para crear un flujo con un modelo que tú elijas*\n\n<br></br>\n\n*Reto: ¿Que otros \"preprocesadores\", aparte de formulas, podemos usar en `workflow`?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"explore-tree-workflow\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Predecir usando tu modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n¿Como usar su nuevo modelo `arbol_flujo`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol_espec <-\n  decision_tree(cost_complexity = 0.002) %>% \n  set_mode(\"classification\")\n\narbol_flujo <-\n  workflow(propina ~ ., arbol_espec) %>% \n  fit(data = taxi_entrenar) \n```\n:::\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Corre:*\n\n`predict(arbol_flujo, new_data = taxi_prueba)`\n\n*¿Que resultado te dio?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"predict-tree-fit\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Tu turno\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Corre:*\n\n`augment(arbol_flujo, new_data = taxi_prueba)`\n\n*¿Que resultado te dio?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"augment-tree-fit\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# La garantía de predicciones en Tidymodels! \n\n. . .\n\n-   Las predicciones siempre estarán dentro de una tabla tipo **tibble**\n-   Los nombres de las columnas van a ser **predecibles** y **sin sorpresas**\n-   El número de filas en los nuevos datos (`new_data`) y los resultados siempre\nvar a ser el mismo \n\n## Entiendedo tú modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n¿Como podemos **entender** nuestro nuevo modelo `arbol_flujo`?\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-4-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Entiendedo tú modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n¿Como podemos **entender** nuestro nuevo modelo `arbol_flujo`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\narbol_flujo %>%\n  extract_fit_engine() %>%\n  rpart.plot(roundint = FALSE)\n```\n:::\n\n\nPuedes extraer varios componentes de tu flujo usando las funciones\nque empiezan con `extract_*()`\n\n. . .\n\n⚠️ *¡Nunca trate de predecir usando los componentes extraídos!*\n\n::: notes\n`roundint = FALSE` is only to quiet a warning\n:::\n\n## Entiendedo tú modelo ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n¿Como podemos **entender** nuestro nuevo modelo `arbol_flujo`?\n\n. . .\n\n\nPuedes usar tu flujo ajustado para obtener explicaciones del modelo o de las\npredicciones:\n\n. . .\n\n\n-   El paquete [vip](https://koalaverse.github.io/vip/) puede dar la importancia\nde cada variable\n\n. . .\n\n-   Para obtener explicaciones del modelo, puede usar el paquete [DALEXtra](https://dalex.drwhy.ai/)\n\n. . .\n\nPara aprender más: <https://www.tmwr.org/explain.html>\n\n##  {background-iframe=\"https://hardhat.tidymodels.org/reference/hardhat-extract.html\"}\n\n::: footer\n:::\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n<br>\n\n*Extrae el \"motor\" del modelo de tu flujo y examínalo*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"extract-methods\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n:::notes\nAfterward, ask what kind of object people got from the extraction, and what they did with it (e.g. give it to `summary()`, `plot()`, `broom::tidy()` ). Live code along\n:::\n\n## Expectativas del taller - Donde estamos\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos\\nlos datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#fff,stroke:#eee,color:#ddd\n  tr --> dt\n  lg[Regresión\\nlogística]\n  style lg fill:#fff,stroke:#eee,color:#ddd\n  rs --> lg\n  dt[Arbol de\\nDecisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque\\nAleatorio]\n  style rf fill:#fff,stroke:#eee,color:#ddd\n  rs --> rf\n  sm[Seleccionar\\nmodelo]\n  style sm fill:#fff,stroke:#eee,color:#ddd\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo\\nselecionado]\n  style fm fill:#fff,stroke:#eee,color:#ddd\n  sm --> fm\n  tr --> fm\n  vm[Verificar la\\ncalidad]\n  style vm fill:#fff,stroke:#eee,color:#ddd\n  fm --> vm\n  ts --> vm\n\n```\n\n\n\n:::notes\nStress that fitting a model on the entire training set was only for illustrating how to fit a model\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}